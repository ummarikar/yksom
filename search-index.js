var N=null,E="",T="t",U="u",searchIndex={};
var R=["num_vars","bytecode_off","instrs","yksom::compiler","Builtin","Primitive","A value which can't be represented in an `isize`.","yksom::vm::core","yksom::vm::core::VMError","expected","yksom::vm","supercls","num_inst_vars","MethodBody","A built-in primitive.","User bytecode.","How many variables does this method define?","The offset of this method's bytecode in its parent class.","yksom::vm::objects","vmerror","blockinfo","result","downcast","Cast a `Val` into an instance of type `T` (where `T` must…","thinobj","as_isize","as_usize","If this `Val` represents a non-bigint integer, return its…","option","dyn_objtype","What `ObjType` does this `Val` represent?","objtype","get_class","Produce a new `Val` which adds `other` to this.","Produce a new `Val` which subtracts `other` from this.","Produce a new `Val` which multiplies `other` to this.","Produce a new `Val` which divides `other` from this.","Produce a new `Val` which shifts `self` `other` bits to…","to_strval","ref_equals","not_equals","greater_than","greater_than_equals","less_than","less_than_equals","yksom::compiler::cobjects","try_into","try_from","borrow_mut","type_id","borrow","typeid","yksom::compiler::instrs","to_owned","clone_into","yksom::vm::val","static_objtype","valkind","formatter","layout","Method","String_","StaticObjType"];

searchIndex["yksom"]={"doc":"A SOM VM in Rust. SOM is a cut-down Smalltalk-like…","i":[[0,"compiler","yksom","A SOM compiler. This is currently fairly simplistic,…",N,N],[5,"compile",R[3],"Compile a class. Should only be called by the `VM`.",N,[[["path"]],["class"]]],[0,"cobjects",E,E,N,N],[3,"Class",R[45],E,N,N],[12,"name",E,E,0,N],[12,"path",E,E,0,N],[12,R[11],E,E,0,N],[12,R[12],E,E,0,N],[12,"methods",E,E,0,N],[12,"blocks",E,E,0,N],[12,R[2],E,E,0,N],[12,"consts",E,E,0,N],[12,"sends",E,E,0,N],[3,R[60],E,E,N,N],[12,"name",E,E,1,N],[12,"body",E,E,1,N],[3,"Block",E,E,N,N],[12,R[1],E,E,2,N],[12,"bytecode_end",E,E,2,N],[12,"num_params",E,E,2,N],[12,R[0],E,E,2,N],[4,"Const",E,E,N,N],[13,"Int",E,E,3,N],[13,"String",E,E,3,N],[4,R[13],E,E,N,N],[13,R[5],E,R[14],4,N],[13,"User",E,R[15],4,N],[12,R[0],"yksom::compiler::cobjects::MethodBody",R[16],4,N],[12,R[1],E,R[17],4,N],[0,R[2],R[3],E,N,N],[4,"Instr",R[52],E,N,N],[13,"Block",E,E,5,N],[13,R[4],E,E,5,N],[13,"ClosureReturn",E,E,5,N],[13,"Const",E,E,5,N],[13,"Double",E,E,5,N],[13,"InstVarLookup",E,E,5,N],[13,"InstVarSet",E,E,5,N],[13,"Pop",E,E,5,N],[13,"Return",E,E,5,N],[13,"Send",E,E,5,N],[13,"VarLookup",E,E,5,N],[13,"VarSet",E,E,5,N],[4,R[4],E,E,N,N],[13,"False",E,E,6,N],[13,"Nil",E,E,6,N],[13,"System",E,E,6,N],[13,"True",E,E,6,N],[4,R[5],E,E,N,N],[13,"Add",E,E,7,N],[13,"AsString",E,E,7,N],[13,"Class",E,E,7,N],[13,"Concatenate",E,E,7,N],[13,"Div",E,E,7,N],[13,"Equals",E,E,7,N],[13,"GreaterThan",E,E,7,N],[13,"GreaterThanEquals",E,E,7,N],[13,"LessThan",E,E,7,N],[13,"LessThanEquals",E,E,7,N],[13,"Mul",E,E,7,N],[13,"Name",E,E,7,N],[13,"NotEquals",E,E,7,N],[13,"New",E,E,7,N],[13,"PrintNewline",E,E,7,N],[13,"PrintString",E,E,7,N],[13,"RefEquals",E,E,7,N],[13,"Restart",E,E,7,N],[13,"Shl",E,E,7,N],[13,"Sub",E,E,7,N],[13,"Value",E,"Is this `value` (0), `value:` (1), or `value:with:` (2)?",7,N],[0,"vm","yksom","The yksom run-time. The run-time uses trait objects but…",N,N],[0,"core",R[10],"The core part of the interpreter.",N,N],[3,"VM",R[7],E,N,N],[12,"block_cls",E,E,8,N],[12,"block2_cls",E,E,8,N],[12,"block3_cls",E,E,8,N],[12,"bool_cls",E,E,8,N],[12,"cls_cls",E,E,8,N],[12,"double_cls",E,E,8,N],[12,"false_cls",E,E,8,N],[12,"int_cls",E,E,8,N],[12,"nil_cls",E,E,8,N],[12,"obj_cls",E,E,8,N],[12,"str_cls",E,E,8,N],[12,"system_cls",E,E,8,N],[12,"true_cls",E,E,8,N],[12,"false_",E,E,8,N],[12,"nil",E,E,8,N],[12,"system",E,E,8,N],[12,"true_",E,E,8,N],[3,"Frame",E,E,N,N],[3,"Closure",E,E,N,N],[4,"VMError",E,E,N,N],[13,"CantRepresentAsBigInt",E,R[6],9,N],[13,"CantRepresentAsDouble",E,"A value which can't be represented in an `f64`.",9,N],[13,"CantRepresentAsIsize",E,R[6],9,N],[13,"CantRepresentAsUsize",E,"A value which can't be represented in an `usize`.",9,N],[13,"DivisionByZero",E,E,9,N],[13,"Exit",E,"The VM is trying to exit.",9,N],[13,"GcBoxTypeError",E,"Tried to perform a `Val::downcast` operation on a…",9,N],[12,R[9],R[8],E,9,N],[12,"got",E,E,9,N],[13,"NegativeShift",R[7],"Tried to do a shl or shr with a value below zero.",9,N],[13,"NotANumber",E,"A specialised version of TypeError, because SOM has more…",9,N],[12,"got",R[8],E,9,N],[13,"PrimitiveError",R[7],"Something went wrong when trying to execute a primitive.",9,N],[13,"ShiftTooBig",E,"Tried to do a shl that would overflow memory and/or not…",9,N],[13,"TypeError",E,"A dynamic type error.",9,N],[12,R[9],R[8],E,9,N],[12,"got",E,E,9,N],[13,"UnassignedVar",R[7],"Tried to read from a local variable that hasn't had a…",9,N],[13,"UnknownMethod",E,"An unknown method.",9,N],[17,"SOM_EXTENSION",E,E,N,N],[11,"new",E,E,8,[[["string"],["vec",["string"]]],["self"]]],[11,"compile",E,"Compile the file at `path`. `inst_vars_allowed` should be…",8,[[["path"],["self"],["bool"]],["val"]]],[11,"error",E,"Inform the user of the error string `error` and then exit.",8,[[["str"],["self"]]]],[11,"send",E,"Send the message `msg` to the receiver `rcv` with…",8,[[["str"],["vec",["val"]],["self"],["val"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[0,"objects",R[10],"This module contains the core SOM objects. Note that there…",N,N],[3,"Block",R[18],E,N,N],[12,"blockn_cls",E,E,10,N],[12,"blockinfo_cls",E,E,10,N],[12,"blockinfo_off",E,E,10,N],[12,"parent_closure",E,E,10,N],[3,"Class",E,E,N,N],[12,"name",E,E,11,N],[12,"path",E,E,11,N],[12,R[11],E,E,11,N],[12,R[12],E,E,11,N],[12,"methods",E,E,11,N],[12,"blockinfos",E,E,11,N],[12,R[2],E,E,11,N],[12,"consts",E,E,11,N],[12,"sends",E,E,11,N],[3,"Double",E,"A boxed Double (which is synonymous with a f64 in yksom).",N,N],[3,"Inst",E,"An instance of a user class.",N,N],[3,"ArbInt",E,"A boxed arbitrary sized `BigInt`.",N,N],[3,"Int",E,"A boxed `isize`.",N,N],[3,R[60],E,E,N,N],[12,"name",E,E,12,N],[12,"body",E,E,12,N],[3,R[61],E,E,N,N],[3,"ThinObj",E,"A narrow pointer to #trait_id.",N,N],[4,R[13],E,E,N,N],[13,R[5],E,R[14],13,N],[13,"User",E,R[15],13,N],[12,R[0],"yksom::vm::objects::MethodBody",R[16],13,N],[12,R[1],E,R[17],13,N],[4,"ObjType",R[18],"The SOM type of objects.",N,N],[13,"ArbInt",E,E,14,N],[13,"Block",E,E,14,N],[13,"Class",E,E,14,N],[13,"Double",E,E,14,N],[13,R[60],E,E,14,N],[13,"Inst",E,E,14,N],[13,"Int",E,E,14,N],[13,R[61],E,E,14,N],[11,"new",E,E,10,[[["closure"],["usize"],["gc",["closure"]],["vm"],["val"]],["val"]]],[11,"from_ccls",E,E,11,[[["vm"],["class"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"name",E,E,11,[[["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"get_method",E,E,11,[[["str"],["self"],["vm"]],[[R[21],["box"]],["box",[R[19]]]]]],[11,R[20],E,E,11,[[["self"],["usize"]],[R[20]]]],[11,"new",E,E,15,[[["f64"],["vm"]],["val"]]],[11,"double",E,E,15,[[["self"]],["f64"]]],[11,"new",E,E,16,[[["vm"],["val"]],["val"]]],[11,"inst_var_lookup",E,E,16,[[["self"],["usize"]],["val"]]],[11,"inst_var_set",E,E,16,[[["val"],["self"],["usize"]]]],[11,"new",E,"Create a `Val` representing the `BigInt` integer `val`.…",17,[[["bigint"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"bigint",E,E,17,[[["self"]],["bigint"]]],[11,"boxed_isize",E,"Create a `Val` representing the `usize` integer `i`. The…",18,[[["isize"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[25],E,E,18,[[["self"]],["isize"]]],[11,R[26],E,E,18,[[["self"]],[[R[28],["usize"]],["usize"]]]],[11,"new",E,E,19,[[["string"],["vm"]],["val"]]],[11,"as_str",E,E,19,[[["self"]],["str"]]],[11,"concatenate",E,"Concatenate this string with another string and return the…",19,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[8,"Obj",E,"The main SOM Object trait. Notice that code should almost…",N,N],[10,R[29],E,R[30],20,[[["self"]],[R[31]]]],[10,R[32],E,"What class is this object an instance of?",20,[[["self"],["vm"]],["val"]]],[11,R[38],E,"Convert this object to a `Val` that represents a SOM string.",20,[[["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"add",E,R[33],20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"sub",E,R[34],20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"mul",E,R[35],20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"div",E,R[36],20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"shl",E,R[37],20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[39],E,"Is this `Val` reference equality equal to `other`? Only…",20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"equals",E,"Does this `Val` equal `other`?",20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[40],E,"Does this `Val` not equal `other`?",20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[41],E,"Is this `Val` greater than `other`?",20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[42],E,"Is this `Val` greater than or equal to `other`?",20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[43],E,"Is this `Val` less than `other`?",20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[44],E,"Is this `Val` less than or equal to `other`?",20,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[8,R[62],E,E,N,N],[10,R[56],E,"Return this trait type's static `ObjType`",21,[[],[R[31]]]],[11,"new",E,"Create a new narrow pointer to #trait_id.",22,[[[U]],["gc"]]],[11,"recover",E,E,22,[[["obj"]],[[R[24]],["gc",[R[24]]]]]],[11,R[22],E,"Try casting this narrow trait object to a concrete struct…",22,[[["self"]],[[R[28]],[U]]]],[0,"val",R[10],"Tagged pointer support.",N,N],[3,"Val",R[55],"The core struct representing values in the language…",N,N],[4,"ValKind",E,E,N,N],[13,"GCBOX",E,E,23,N],[13,"INT",E,E,23,N],[17,"BITSIZE",E,E,N,N],[17,"TAG_BITSIZE",E,E,N,N],[17,"TAG_BITMASK",E,E,N,N],[17,"INT_BITMASK",E,E,N,N],[8,"NotUnboxable",E,"Objects which `impl` this trait guarantee that they can…",N,N],[11,"from_unchecked",E,E,23,[[["usize"]],["self"]]],[11,"from_obj",E,"Create a `Val` from a given instance of the `Obj` trait.",24,[[["obj"],["vm"]],["self"]]],[11,"recover",E,"Convert `obj` into a `Val`. `Obj` must previously have…",24,[[["obj"]],["self"]]],[11,"illegal",E,"Create a value upon which all operations are invalid. This…",24,[[],["val"]]],[11,"is_illegal",E,"Is this `Var` illegal i.e. is it an empty placeholder…",24,[[["self"]],["bool"]]],[11,R[57],E,E,24,[[["self"]],[R[57]]]],[11,R[22],E,R[23],24,[[["self"],["vm"]],[[T],[R[21],["box"]],["box",[R[19]]]]]],[11,"try_downcast",E,R[23],24,[[["self"],["vm"]],[[T],[R[28]]]]],[11,"tobj",E,"Return this `Val`'s box. If the `Val` refers to an unboxed…",24,[[["self"],["vm"]],[["box",[R[19]]],["gc",[R[24]]],[R[21],["gc","box"]]]]],[11,"from_isize",E,"Create a (possibly boxed) `Val` representing the `isize`…",24,[[["isize"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"from_usize",E,"Create a (possibly boxed) `Val` representing the `usize`…",24,[[["vm"],["usize"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"from_bool",E,"If `v == true`, return a `Val` representing `vm.true_`,…",24,[[["vm"],["bool"]],["val"]]],[11,R[25],E,R[27],24,[[["self"],["vm"]],[[R[28],["isize"]],["isize"]]]],[11,R[26],E,R[27],24,[[["self"],["vm"]],[[R[28],["usize"]],["usize"]]]],[11,R[29],E,R[30],24,[[["self"],["vm"]],[R[31]]]],[11,R[32],E,"What class is this `Val` an instance of?",24,[[["self"],["vm"]],["val"]]],[11,"add",E,R[33],24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"sub",E,R[34],24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"mul",E,R[35],24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"div",E,R[36],24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"shl",E,R[37],24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[38],E,E,24,[[["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[39],E,"Is this `Val` reference equal to `other`? Notice that for…",24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"equals",E,E,24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[40],E,E,24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[41],E,E,24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[42],E,E,24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[43],E,E,24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[44],E,E,24,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"into",R[45],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[47],E,E,0,[[[U]],[R[21]]]],[11,R[46],E,E,0,[[],[R[21]]]],[11,R[50],E,E,0,[[["self"]],[T]]],[11,R[48],E,E,0,[[["self"]],[T]]],[11,R[49],E,E,0,[[["self"]],[R[51]]]],[11,R[46],E,E,0,[[],[R[21]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[47],E,E,1,[[[U]],[R[21]]]],[11,R[46],E,E,1,[[],[R[21]]]],[11,R[50],E,E,1,[[["self"]],[T]]],[11,R[48],E,E,1,[[["self"]],[T]]],[11,R[49],E,E,1,[[["self"]],[R[51]]]],[11,R[46],E,E,1,[[],[R[21]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[47],E,E,2,[[[U]],[R[21]]]],[11,R[46],E,E,2,[[],[R[21]]]],[11,R[50],E,E,2,[[["self"]],[T]]],[11,R[48],E,E,2,[[["self"]],[T]]],[11,R[49],E,E,2,[[["self"]],[R[51]]]],[11,R[46],E,E,2,[[],[R[21]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[47],E,E,3,[[[U]],[R[21]]]],[11,R[46],E,E,3,[[],[R[21]]]],[11,R[50],E,E,3,[[["self"]],[T]]],[11,R[48],E,E,3,[[["self"]],[T]]],[11,R[49],E,E,3,[[["self"]],[R[51]]]],[11,R[46],E,E,3,[[],[R[21]]]],[11,"equivalent",E,E,3,[[["k"],["self"]],["bool"]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[47],E,E,4,[[[U]],[R[21]]]],[11,R[46],E,E,4,[[],[R[21]]]],[11,R[50],E,E,4,[[["self"]],[T]]],[11,R[48],E,E,4,[[["self"]],[T]]],[11,R[49],E,E,4,[[["self"]],[R[51]]]],[11,R[46],E,E,4,[[],[R[21]]]],[11,"into",R[52],E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[53],E,E,5,[[["self"]],[T]]],[11,R[54],E,E,5,[[["self"],[T]]]],[11,R[47],E,E,5,[[[U]],[R[21]]]],[11,R[46],E,E,5,[[],[R[21]]]],[11,R[50],E,E,5,[[["self"]],[T]]],[11,R[48],E,E,5,[[["self"]],[T]]],[11,R[49],E,E,5,[[["self"]],[R[51]]]],[11,R[46],E,E,5,[[],[R[21]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[53],E,E,6,[[["self"]],[T]]],[11,R[54],E,E,6,[[["self"],[T]]]],[11,R[47],E,E,6,[[[U]],[R[21]]]],[11,R[46],E,E,6,[[],[R[21]]]],[11,R[50],E,E,6,[[["self"]],[T]]],[11,R[48],E,E,6,[[["self"]],[T]]],[11,R[49],E,E,6,[[["self"]],[R[51]]]],[11,R[46],E,E,6,[[],[R[21]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[53],E,E,7,[[["self"]],[T]]],[11,R[54],E,E,7,[[["self"],[T]]]],[11,R[47],E,E,7,[[[U]],[R[21]]]],[11,R[46],E,E,7,[[],[R[21]]]],[11,R[50],E,E,7,[[["self"]],[T]]],[11,R[48],E,E,7,[[["self"]],[T]]],[11,R[49],E,E,7,[[["self"]],[R[51]]]],[11,R[46],E,E,7,[[],[R[21]]]],[11,"into",R[7],E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[47],E,E,8,[[[U]],[R[21]]]],[11,R[46],E,E,8,[[],[R[21]]]],[11,R[50],E,E,8,[[["self"]],[T]]],[11,R[48],E,E,8,[[["self"]],[T]]],[11,R[49],E,E,8,[[["self"]],[R[51]]]],[11,R[46],E,E,8,[[],[R[21]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[47],E,E,25,[[[U]],[R[21]]]],[11,R[46],E,E,25,[[],[R[21]]]],[11,R[50],E,E,25,[[["self"]],[T]]],[11,R[48],E,E,25,[[["self"]],[T]]],[11,R[49],E,E,25,[[["self"]],[R[51]]]],[11,R[46],E,E,25,[[],[R[21]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[47],E,E,26,[[[U]],[R[21]]]],[11,R[46],E,E,26,[[],[R[21]]]],[11,R[50],E,E,26,[[["self"]],[T]]],[11,R[48],E,E,26,[[["self"]],[T]]],[11,R[49],E,E,26,[[["self"]],[R[51]]]],[11,R[46],E,E,26,[[],[R[21]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[47],E,E,9,[[[U]],[R[21]]]],[11,R[46],E,E,9,[[],[R[21]]]],[11,R[50],E,E,9,[[["self"]],[T]]],[11,R[48],E,E,9,[[["self"]],[T]]],[11,R[49],E,E,9,[[["self"]],[R[51]]]],[11,R[46],E,E,9,[[],[R[21]]]],[11,"into",R[18],E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[47],E,E,10,[[[U]],[R[21]]]],[11,R[46],E,E,10,[[],[R[21]]]],[11,R[50],E,E,10,[[["self"]],[T]]],[11,R[48],E,E,10,[[["self"]],[T]]],[11,R[49],E,E,10,[[["self"]],[R[51]]]],[11,R[46],E,E,10,[[],[R[21]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[47],E,E,11,[[[U]],[R[21]]]],[11,R[46],E,E,11,[[],[R[21]]]],[11,R[50],E,E,11,[[["self"]],[T]]],[11,R[48],E,E,11,[[["self"]],[T]]],[11,R[49],E,E,11,[[["self"]],[R[51]]]],[11,R[46],E,E,11,[[],[R[21]]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[47],E,E,15,[[[U]],[R[21]]]],[11,R[46],E,E,15,[[],[R[21]]]],[11,R[50],E,E,15,[[["self"]],[T]]],[11,R[48],E,E,15,[[["self"]],[T]]],[11,R[49],E,E,15,[[["self"]],[R[51]]]],[11,R[46],E,E,15,[[],[R[21]]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[47],E,E,16,[[[U]],[R[21]]]],[11,R[46],E,E,16,[[],[R[21]]]],[11,R[50],E,E,16,[[["self"]],[T]]],[11,R[48],E,E,16,[[["self"]],[T]]],[11,R[49],E,E,16,[[["self"]],[R[51]]]],[11,R[46],E,E,16,[[],[R[21]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[47],E,E,17,[[[U]],[R[21]]]],[11,R[46],E,E,17,[[],[R[21]]]],[11,R[50],E,E,17,[[["self"]],[T]]],[11,R[48],E,E,17,[[["self"]],[T]]],[11,R[49],E,E,17,[[["self"]],[R[51]]]],[11,R[46],E,E,17,[[],[R[21]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[47],E,E,18,[[[U]],[R[21]]]],[11,R[46],E,E,18,[[],[R[21]]]],[11,R[50],E,E,18,[[["self"]],[T]]],[11,R[48],E,E,18,[[["self"]],[T]]],[11,R[49],E,E,18,[[["self"]],[R[51]]]],[11,R[46],E,E,18,[[],[R[21]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[47],E,E,12,[[[U]],[R[21]]]],[11,R[46],E,E,12,[[],[R[21]]]],[11,R[50],E,E,12,[[["self"]],[T]]],[11,R[48],E,E,12,[[["self"]],[T]]],[11,R[49],E,E,12,[[["self"]],[R[51]]]],[11,R[46],E,E,12,[[],[R[21]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[47],E,E,19,[[[U]],[R[21]]]],[11,R[46],E,E,19,[[],[R[21]]]],[11,R[50],E,E,19,[[["self"]],[T]]],[11,R[48],E,E,19,[[["self"]],[T]]],[11,R[49],E,E,19,[[["self"]],[R[51]]]],[11,R[46],E,E,19,[[],[R[21]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[47],E,E,22,[[[U]],[R[21]]]],[11,R[46],E,E,22,[[],[R[21]]]],[11,R[50],E,E,22,[[["self"]],[T]]],[11,R[48],E,E,22,[[["self"]],[T]]],[11,R[49],E,E,22,[[["self"]],[R[51]]]],[11,R[46],E,E,22,[[],[R[21]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[47],E,E,13,[[[U]],[R[21]]]],[11,R[46],E,E,13,[[],[R[21]]]],[11,R[50],E,E,13,[[["self"]],[T]]],[11,R[48],E,E,13,[[["self"]],[T]]],[11,R[49],E,E,13,[[["self"]],[R[51]]]],[11,R[46],E,E,13,[[],[R[21]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[47],E,E,14,[[[U]],[R[21]]]],[11,R[46],E,E,14,[[],[R[21]]]],[11,R[50],E,E,14,[[["self"]],[T]]],[11,R[48],E,E,14,[[["self"]],[T]]],[11,R[49],E,E,14,[[["self"]],[R[51]]]],[11,R[46],E,E,14,[[],[R[21]]]],[11,"into",R[55],E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[53],E,E,24,[[["self"]],[T]]],[11,R[54],E,E,24,[[["self"],[T]]]],[11,R[47],E,E,24,[[[U]],[R[21]]]],[11,R[46],E,E,24,[[],[R[21]]]],[11,R[50],E,E,24,[[["self"]],[T]]],[11,R[48],E,E,24,[[["self"]],[T]]],[11,R[49],E,E,24,[[["self"]],[R[51]]]],[11,R[46],E,E,24,[[],[R[21]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[47],E,E,23,[[[U]],[R[21]]]],[11,R[46],E,E,23,[[],[R[21]]]],[11,R[50],E,E,23,[[["self"]],[T]]],[11,R[48],E,E,23,[[["self"]],[T]]],[11,R[49],E,E,23,[[["self"]],[R[51]]]],[11,R[46],E,E,23,[[],[R[21]]]],[11,R[56],R[18],E,10,[[],[R[31]]]],[11,R[56],E,E,11,[[],[R[31]]]],[11,R[56],E,E,15,[[],[R[31]]]],[11,R[56],E,E,16,[[],[R[31]]]],[11,R[56],E,E,17,[[],[R[31]]]],[11,R[56],E,E,18,[[],[R[31]]]],[11,R[56],E,E,12,[[],[R[31]]]],[11,R[56],E,E,19,[[],[R[31]]]],[11,R[29],E,E,10,[[["self"]],[R[31]]]],[11,R[32],E,E,10,[[["self"],["vm"]],["val"]]],[11,R[29],E,E,11,[[["self"]],[R[31]]]],[11,R[32],E,E,11,[[["self"],["vm"]],["val"]]],[11,R[29],E,E,15,[[["self"]],[R[31]]]],[11,R[32],E,E,15,[[["self"],["vm"]],["val"]]],[11,R[38],E,E,15,[[["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"add",E,E,15,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"sub",E,E,15,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"mul",E,E,15,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[39],E,E,15,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"equals",E,E,15,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[43],E,E,15,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[29],E,E,16,[[["self"]],[R[31]]]],[11,R[32],E,E,16,[[["self"],["vm"]],["val"]]],[11,R[29],E,E,17,[[["self"]],[R[31]]]],[11,R[32],E,E,17,[[["self"],["vm"]],["val"]]],[11,R[38],E,E,17,[[["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"add",E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"sub",E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"mul",E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"div",E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"shl",E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[39],E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,"equals",E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[40],E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[41],E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[42],E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[43],E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[44],E,E,17,[[["val"],["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[29],E,E,18,[[["self"]],[R[31]]]],[11,R[32],E,E,18,[[["self"],["vm"]],["val"]]],[11,R[38],E,E,18,[[["self"],["vm"]],[["box",[R[19]]],["val"],[R[21],["val","box"]]]]],[11,R[29],E,E,12,[[["self"]],[R[31]]]],[11,R[32],E,E,12,[[["self"],["vm"]],["val"]]],[11,R[29],E,E,19,[[["self"]],[R[31]]]],[11,R[32],E,E,19,[[["self"],["vm"]],["val"]]],[11,"drop",E,E,22,[[["self"]]]],[11,"drop",R[55],E,24,[[["self"]]]],[11,"clone",R[52],E,5,[[["self"]],["instr"]]],[11,"clone",E,E,6,[[["self"]],["builtin"]]],[11,"clone",E,E,7,[[["self"]],["primitive"]]],[11,"clone",R[55],E,24,[[["self"]],["self"]]],[11,"eq",R[45],E,3,[[["self"],["const"]],["bool"]]],[11,"ne",E,E,3,[[["self"],["const"]],["bool"]]],[11,"eq",R[7],E,9,[[[R[19]],["self"]],["bool"]]],[11,"ne",E,E,9,[[[R[19]],["self"]],["bool"]]],[11,"eq",R[18],E,14,[[["self"],[R[31]]],["bool"]]],[11,"eq",R[55],E,23,[[["self"],[R[57]]],["bool"]]],[11,"eq",E,E,24,[[["self"],["val"]],["bool"]]],[11,"ne",E,E,24,[[["self"],["val"]],["bool"]]],[11,"fmt",R[52],E,5,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,6,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,7,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",R[7],E,9,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,25,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,26,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",R[18],E,10,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,11,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,15,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,16,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,17,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,18,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,12,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,13,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,19,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,14,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",R[55],E,23,[[["self"],[R[58]]],[R[21]]]],[11,"fmt",E,E,24,[[["self"],[R[58]]],[R[21]]]],[11,"deref",R[18],E,22,[[["self"]],["obj"]]],[11,"hash",R[45],E,3,[[["self"],["__h"]]]],[11,R[59],R[7],E,26,[[["self"]],[R[59]]]],[11,R[59],R[18],E,10,[[["self"]],[R[59]]]],[11,R[59],E,E,11,[[["self"]],[R[59]]]],[11,R[59],E,E,15,[[["self"]],[R[59]]]],[11,R[59],E,E,16,[[["self"]],[R[59]]]],[11,R[59],E,E,17,[[["self"]],[R[59]]]],[11,R[59],E,E,18,[[["self"]],[R[59]]]],[11,R[59],E,E,12,[[["self"]],[R[59]]]],[11,R[59],E,E,19,[[["self"]],[R[59]]]],[11,R[59],E,E,22,[[["self"]],[R[59]]]]],"p":[[3,"Class"],[3,R[60]],[3,"Block"],[4,"Const"],[4,R[13]],[4,"Instr"],[4,R[4]],[4,R[5]],[3,"VM"],[4,"VMError"],[3,"Block"],[3,"Class"],[3,R[60]],[4,R[13]],[4,"ObjType"],[3,"Double"],[3,"Inst"],[3,"ArbInt"],[3,"Int"],[3,R[61]],[8,"Obj"],[8,R[62]],[3,"ThinObj"],[4,"ValKind"],[3,"Val"],[3,"Frame"],[3,"Closure"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);